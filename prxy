package com.sbi.risks.spr.collection.service

import org.slf4j.LoggerFactory
import java.net.InetSocketAddress
import java.net.Proxy
import java.net.URL
import java.util.*

class ProxyProviderImpl : ProxyProvider {

    val log = LoggerFactory.getLogger(ProxyProviderImpl::class.java)

    companion object{
        const val DELIMITER = ":"
    }

    private val proxies = LinkedList<Proxy>()
    private var iter = proxies.iterator()


    init {
        proxies.addAll(getObjects("proxies.csv"))
        iter = proxies.iterator()
    }

    override fun getProxy() : Proxy {
        return if (iter.hasNext()){
            iter.next()
        } else {
            iter = proxies.iterator()
            iter.next()
        }
    }

    private fun getLines(file: URL): List<List<String>> {
        val lines = ArrayList<List<String>>()
        try {
            file.openStream().bufferedReader().use { reader ->
                var strLine = reader.readLine()
                while (strLine != null) {
                    lines.add(strLine.split(DELIMITER))
                    strLine = reader.readLine()
                }
                reader.close()
            }
        } catch (e: Exception) {
            log.error("Cannot parse cvs file", e)
        }

        return lines
    }

    private fun getObjects(filePath: String): List<Proxy> =
            getLines(javaClass.classLoader.getResource(filePath)).map { Proxy(Proxy.Type.HTTP, InetSocketAddress(it[0], it[1].toInt())) }
                    .toList()
}
